# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V2JuzV40owHf1aoIcct9ZpV5z2BB4OF0
"""

import turtle

import random

import tkinter as tk

from tkinter import ttk

from tkinter import messagebox



# this variable for color number

color_no=0

# this function change the color of cell when click on the screen

# the parameters in function are location click of the screen

def change_color(x,y):

global color_no

# when the ckick on screen the var increase by 1 to change anothe color

color_no+=1

# there are three colors for cell if the value of the variable is 4 set it 1

if color_no>3:

color_no=1

# the value 1 in variable reference to yellow color

if color_no==1:

t.fillcolor("yellow")

# the value 2 in variable reference to red color

if color_no==2:

t.fillcolor("red")

# the value 3 in variable reference to white color

if color_no==3:

t.fillcolor("white")



# this conditions compare the coordinates of the clicked screen

# if the coordinates in the first cell change color for this cell

# the first cell that drawn begain in 30 and end in 70 of X axis and -15 to 50 of Y axis



if x>30 and x<70 and y<50 and y>-15:

# if the user click in any where in this coordinates up the pen

# and move it to first point to redraw the cell by anothe color

t.penup()

t.goto(30,50)

# evry cell has deffirent coordinates and change the color like first cell

if x>91 and x<131 and y<85 and y>20:

t.penup()

t.goto(91,85)

if x>91 and x<131 and y<15 and y>-50:

t.penup()

t.goto(91,15)

if x>152 and x<192 and y<50 and y>-15:

t.penup()

t.goto(152,50)

if x>30 and x<70 and y<-19 and y>-84:

t.penup()

t.goto(30,-19)

if x>-32 and x<8 and y<16 and y>-49:

t.penup()

t.goto(-32,16)

if x>-94 and x<-54 and y<50 and y>-15:

t.penup()

t.goto(-94,50)

if x>-32 and x<8 and y<85 and y>20:

t.penup()

t.goto(-32,85)

if x>152 and x<192 and y<120 and y>55:

t.penup()

t.goto(152,120)

if x>30 and x<70 and y<120 and y>55:

t.penup()

t.goto(30,120)

if x>-94 and x<-54 and y<120 and y>55:

t.penup()

t.goto(-94,120)

if x>152 and x<192 and y<-19 and y>-84:

t.penup()

t.goto(152,-19)

if x>91 and x<131 and y<-54 and y>-119:

t.penup()

t.goto(91,-54)

if x>152 and x<192 and y<-88 and y>-153:

t.penup()

t.goto(152,-88)

if x>152 and x<192 and y<-158 and y>-223:

t.penup()

t.goto(152,-158)

if x>91 and x<131 and y<-122 and y>-187:

t.penup()

t.goto(91,-122)

if x>30 and x<70 and y<-88 and y>-153:

t.penup()

t.goto(30,-88)

if x>-94 and x<-54 and y<-88 and y>-153:

t.penup()

t.goto(-94,-88)

if x>-94 and x<-54 and y<-19 and y>-84:

t.penup()

t.goto(-94,-19)

if x>-32 and x<8 and y<-54 and y>-119:

t.penup()

t.goto(-32,-54)

if x>-94 and x<-54 and y<-158 and y>-223:

t.penup()

t.goto(-94,-158)

if x>30 and x<70 and y<-158 and y>-223:

t.penup()

t.goto(30,-158)

if x>-32 and x<8 and y<-122 and y>-187:

t.penup()

t.goto(-32,-122)

if x>91 and x<131 and y<156 and y>91:

t.penup()

t.goto(91,156)

if x>-32 and x<10 and y<155 and y>89:

t.penup()

t.goto(-32,153)



# after move the pen to first point to draw the cell down it

t.pendown()

# this variable define the sides of the shape by 6 sides as cell

sides = 6

angle = 360/sides

# this function to fill the cell by the color that defined in th first of the function

t.begin_fill()

# this loop to draw every side in the cell

for _ in range(sides):

# this to define the length of the side

t.forward(40)

t.right(angle)

# after draw the shape end the fill the color of the shape

t.end_fill()



# this function to create the cell and write the letter in it

# the parameter x reference to X axis in the coordinates of the screen

# the parameter y reference to Y axis in the coordinates of the screen

# the parameter letter reference to the leeter that writen in the cell

def create_cell(x,y,letter):

# the next three lines to move the pen to first point to draw the cell

t.penup()

t.goto(x,y)

t.pendown()

# this variable define the sides of the shape by 6 sides as cell

sides = 6

angle = 360/sides

# this loop to draw every side in the cell

for _ in range(sides):

# this to define the color of the pen

t.color("red")

# this to define the length of the side

t.forward(40)

t.right(angle)

# change the color of the pen to blue for letter color

t.color("blue")

# move the pen to center of the cell

t.penup()

t.goto(x+20,y-50)

t.pendown()

# write the letter in the center of the cell by bold and arial font

t.write(letter,align="center",font=("Arial",24,"bold"))

# when click in the screen go to change_color function and change the color

turtle.onscreenclick(change_color)

# create object from Turtle class to drawing

t=turtle.Turtle()

# this to change the speed of the drawing

t.speed(1000)

# call the create_cell function and send the coordinates and the letter

create_cell(30,50,"أ")

create_cell(91,85,"ب")

create_cell(91,15,"ج")

create_cell(152,50,"و")

create_cell(30,-19,"ن")

create_cell(-32,16,"ت")

create_cell(-94,50,"ح")

create_cell(-32,85,"ق")

create_cell(152,120,"خ")

create_cell(30,120,"ث")

create_cell(-94,120,"د")

create_cell(152,-19,"ز")

create_cell(91,-54,"ذ")

create_cell(152,-88,"ظ")

create_cell(152,-158,"ش")

create_cell(91,-122,"س")

create_cell(30,-88,"ر")

create_cell(-94,-88,"ض")

create_cell(-94,-19,"غ")

create_cell(-32,-54,"ع")

create_cell(-94,-158,"ط")

create_cell(30,-158,"ك")

create_cell(-32,-122,"م")

create_cell(91,156,"ي")

create_cell(-32,153,"هـ")





# this class for question

# every node content the question and the answer

class Node:

# the constractor

def __init__(self, key ,q,a):

# variable to reference to the left of the node

self.left = None

# variable to reference to the right of the node

self.right = None

# variable to reference to the number of the question

self.val = key

# variable to reference to the question

self.q=q

# variable to reference to the answer

self.a=a



# this list to store the questions which its answers begain by selected letter

questions = []

# this fuction to insert another node into tree

def insert_node(root, key,q,a):

# if not found any question in the tree

if root is None:

# add the node as root and return

return Node(key,q,a)

# if there are nodes in the tree move the nood to queue list

queue = [root]

# loop for all nodes

while queue:

# select the first node

current_node = queue.pop(0)

# if not found any nood in the left of the current node add it in the left

if current_node.left is None:

current_node.left = Node(key,q,a)

break

else:

queue.append(current_node.left)

# if not found any nood in the right of the current node add it in the right

if current_node.right is None:

current_node.right = Node(key,q,a)

break

else:

queue.append(current_node.right)



return root



# Example binary tree

# create a root in the tree

root = Node(1,"من هي زوجة الرسول صلى الله عليه وسلم الأولى","خديجة بنت خويلد")

# those some question added to tree

root = insert_node(root, 2, "من هي ذات النطاقين" ,"أسماء بنت أبي بكر")

root = insert_node(root, 3, "من هو الصحابي الذي ذكر اسمه في القران" ,"زيد بن حارثة")

root = insert_node(root, 4, "من أول مؤذن في الاسلام" ,"بلال بن رباح")

root = insert_node(root, 5, "من هو الصحابي الذي أهتز لموته عرش الرحمن " ,"سعد بن معاذ")

root = insert_node(root, 6, "من هو الصحابي الذي قام بجمع القران" ,"عثمان بن عفان")

root = insert_node(root, 7, "من هو النبي الذي امن به جميع قومه" ,"يونس عليه السلام")

root = insert_node(root, 8, "من أول أبناء سيدنا آدم عليه السلام" ,"قابيل")

root = insert_node(root, 9, "من هو النبي الذي تكرر أسمه كثيرا في القران" ,"موسى عليه السلام")

root = insert_node(root, 10, "من هو النبي الذي علم منطق الطير والحيوانات" ,"سليمان عليه السلام")

root = insert_node(root, 11, "من هو الملك الموكل بالوحي" ,"جبريل عليه السلام")

root = insert_node(root, 12, "من هو شاعر الرسول صلى الله عليه وسلم" ,"حسان بن ثابت")

root = insert_node(root, 13, "من هم القوم الذي ارسل اليهم سيدنا هود عليه السلام" ,"عاد")

root = insert_node(root, 14, "من أول داعية في الاسلام" ,"مصعب بن عمير")

# Example binary tree

# create a root in the tree

root = insert_node(root, 1, "ما هي أول سورة في القرآن؟", "الفاتحة")

root = insert_node(root, 1, "ما هي عاصمة الإمارات؟", "أبوظبي")

root = insert_node(root, 2, "من هو أول مؤذن في الإسلام؟", "بلال")

root = insert_node(root, 2, "ما هو أكبر بحر في العالم؟", "البحر الأبيض المتوسط")

root = insert_node(root, 3, "صلاة يختص بها شهر رمضان المعظم؟", "تراويح")

root = insert_node(root, 3, "اخر غزوات الرسول صلى الله عليه وسلم؟", "تبوك")

root = insert_node(root, 4, "ما هو الحيوان الذي يلقب بأم حواء؟", "الثعبان")

root = insert_node(root, 4, "مما هى قبيلة صالح عليه السلام؟", "ثمود")

root = insert_node(root, 5, "ما هو الحيوان الذي يلقب بسفينة الصحراء؟", "جمل")

root = insert_node(root, 5, "ما هي عاصمة الجزائر؟", "جزائر")

root = insert_node(root, 6, "من هو شاعر الرسول صلى الله عليه وسلم؟", "حسان بن ثابت")

root = insert_node(root, 6, "أشهر الكرماء في التاريخ العربي؟", "حاتم الطاىء")

root = insert_node(root, 7, "من هي زوجة الرسول صلى الله عليه وسلم الأولى؟", "خديجة")

root = insert_node(root, 7, "من هو فاتح الحيرة؟", "خالد بن الوليد")

root = insert_node(root, 8, "من هو النبي الذي سخر الله له الجبال تسبح معه؟", "داوود عليه السلام")

root = insert_node(root, 8, "من الكتب السماوية الزبور على من انزل؟", "داوود عليه السلام")

root = insert_node(root, 9, "لقب أطلق على عدة ملوك وغلب على الاسكندر الاكبر المقدونى؟", "ذو القرنين")

root = insert_node(root, 9, "أول معركة بحرية خاضها المسلمون؟", "ذات الصواري")

root = insert_node(root, 10, "ما هي العملة الرسمية في السعودية؟", "ريال")

root = insert_node(root, 10, "ما هي عاصمة المغرب؟", "رباط")

root = insert_node(root, 11, "من هو الصحابي الذي ذكر اسمه في القرآن؟", "زيد")

root = insert_node(root, 11, "نبي صام عن الكلام ثلاثة ايام؟", "زكريا")

root = insert_node(root, 12, "من هو النبي الذى علمه الله لغة الطير والحيوان؟", "سليمان")

root = insert_node(root, 12, "من هو قائد المسلمين في معركة القادسية؟", "سعد بن ابي وقاس")

root = insert_node(root, 13, "ما هو الاسم الحقيقى للرحالة ابن بطوطة؟", "شمس الدين")

root = insert_node(root, 13, "ما هو الحيوان الذي ينام وأحد عينيه مفتوحة؟", "الشمبانزي")

root = insert_node(root, 14, "من هو النبي الذي ذكر في القران؟", "صالح")

root = insert_node(root, 14, "صاحب لقب الناصر؟", "صلاح الدين الايوبي")

root = insert_node(root, 15, "الانحراف عن دين الله؟", "ضلال")

root = insert_node(root, 15, "من الحيوانات الصحراوية؟", "ضب")

root = insert_node(root, 16, "مرض يسمى الموت الاسود؟", "طاعون")

root = insert_node(root, 16, "مدينة تاريخية قريبة من مكة المكرمة؟", "طائف")

root = insert_node(root, 17, "ما هو الوقت بين الفجر والعصر؟", "ظهر")

root = insert_node(root, 17, "ما هو العدو الخفي؟", "ظلام")

root = insert_node(root, 18, "ما هو الكائن الذي يعيش في الماء ويتنفس الهواء؟", "علجوم")

root = insert_node(root, 18, "من هم القوم الذين أرسل اليهم سيدنا هود؟", "عاد")

root = insert_node(root, 19, "ما هو سخط؟", "غضب")

root = insert_node(root, 19, "ما هو الشيء الذي يوجد في الليل فقط؟", "غسق")

root = insert_node(root, 20, "ما هي الأكلة المشهورة في الشام؟", "فلافل")

root = insert_node(root, 20, "ماذا يسمى بيت النمل؟", "قرية")

root = insert_node(root, 21, "هو والنبي صلى الله عليه وسلم كالوسطى والسبابة في الجنة؟", "كافل اليتيم")

root = insert_node(root, 21, "يستخرج العنبر من؟", "كبد الحوت")

root = insert_node(root, 22, "ما هو الشيء الذي يستخدم لقياس الوزن؟", "ميزان")

root = insert_node(root, 22, "ائنات بحرية من جنس التوابث ذكرت في القران الكريم؟", "مرجان")

root = insert_node(root, 23, "نبي سميت سورة من القران بأسمه؟", "نوح")

root = insert_node(root, 23, "ما يفرض للزوجة على زوجها من مال؟", "نفقة")

root = insert_node(root, 24, "نبي سميت سورة من القران بأسمه؟", "هود")

root = insert_node(root, 24, "ما هو الحيوان الذي يعيش في الغابة؟", "الهدهد")

root = insert_node(root, 25, "خير الامور؟", "وسطها")

root = insert_node(root, 25, "عكس الحقوق؟", "واجبات")

root = insert_node(root, 26, "أمير النمل وذكرها؟", "يعسوب")

root = insert_node(root, 26, "صغير الذي فقد أبويه لاثنين أو أحدهما؟", "يتيم")







# Perform BFS traversal to verify the tree structure

# this function to applay BFS algorith to search for question

# the root parameter reference to the first node in the tree

# the char parameter reference to first letter in the answer of question

def bfs_binary_tree(root,char):

# list to add the all question that its answer begain with char variable

global questions

# if not found any element in the tree exit

if root is None:

return

# the list is empty

questions = []

queue = []

# move the first node to queue list

queue.append(root)

# loop for all elements in the tree

while len(queue) > 0:



current_node = queue.pop(0)

# if the answer of the question begain by char vriable add the node to the list

if current_node.a[0]==char:

questions.append(current_node)

# move to left of the node

if current_node.left is not None:

queue.append(current_node.left)

# move to right of the node

if current_node.right is not None:

queue.append(current_node.right)



# create a frame

frame = tk.Tk()

# title of the frame

frame.title("BFS Example")

# size of the frame

frame.geometry("800x600")

# Create a list of options for the combo box

options = ['أ', 'ب', 'ت', 'ث', 'ج', 'ح', 'خ', 'د', 'ذ', 'ر', 'ز', 'س', 'ش', 'ص', 'ض', 'ط', 'ظ', 'ع', 'غ', 'ف', 'ق', 'ك', 'ل', 'م', 'ن', 'ه', 'و', 'ي']

question = None

# Create a combo box and add the options to it

# event if the user select any letter from combobox

def combo_selected(event):

# call bfs_binary_tree and sent the letter wich selected by the user

bfs_binary_tree(root,combo_box.get())

# show any question from list question

global question

question = random.choice(questions)

title_label2 = tk.Label(frame, text=question.q, font='Courier 18 underline')

title_label2.place(relx=0.3, rely=0.3)

title_label2.pack()



#title_label1.pack()

combo_box = ttk.Combobox(frame, values=options)

combo_box.pack()

combo_box.bind("<<ComboboxSelected>>",combo_selected)

# create label

title_label = tk.Label(frame, text="اختر حرف للأسئلة المقترحة", font='Courier 18 underline')

title_label.place(relx=0.2, rely=0.2)





frame.title("Counting Seconds")

label = tk.Label(frame, fg="dark green")

label.pack()

# this function to show the anser when click on the show_button

def show_answer():

messagebox.showinfo("الإجابة", question.a)



show_button = tk.Button(frame, text="عرض الإجابة", command=show_answer)

show_button.pack()



frame.mainloop()

# end drawing

turtle.done()